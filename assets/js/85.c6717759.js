(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{517:function(t,r,s){"use strict";s.r(r);var e=s(11),i=Object(e.a)({},(function(){var t=this,r=t.$createElement,s=t._self._c||r;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"服务架构演进史"}},[t._v("服务架构演进史")]),t._v(" "),s("p",[t._v("服务架构的演进历史这一章，我们借讨论历史之名，来梳理微服务发展里程中出现的大量名词、概念，借着微服务的演变过程，我们将从这些概念起源的最初，去分析它们是什么、它们取代了什么、以及它们为什么能够在斗争中取得成功，为什么变得不可或缺的支撑，又或者它们为什么会失败，在竞争中被淘汰，或逐渐湮灭于历史的烟尘当中。")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"primitive-distribution"}},[s("strong",[t._v("原始分布式时代")])]),t._v("：使用多个独立的分布式服务共同构建一个更大型系统，尽可能促使服务交互透明与简单，令开发人员不必过份关注他们访问的方法或其他资源是位于本地还是远程。")]),t._v(" "),s("li",[s("a",{attrs:{href:"monolithic"}},[s("strong",[t._v("单体系统时代")])]),t._v("：“单体”只是表明系统中主要的过程调用都是进程内调用，不会发生进程间通讯，仅此而已。")]),t._v(" "),s("li",[s("a",{attrs:{href:"soa"}},[s("strong",[t._v("SOA时代")])]),t._v("：面向服务的架构是第一次系统性地成功解决分布式服务主要问题的架构模式。")]),t._v(" "),s("li",[s("a",{attrs:{href:"microservices"}},[s("strong",[t._v("微服务时代")])]),t._v("：微服务是一种通过多个小型服务组合来构建单个应用的架构风格，这些服务围绕业务能力而非特定的技术标准来构建。各个服务可以采用不同的编程语言，不同的数据存储技术，运行在不同的进程之中。服务采取轻量级的通讯机制和自动化的部署机制实现通讯与运维。")]),t._v(" "),s("li",[s("a",{attrs:{href:"post-microservices"}},[s("strong",[t._v("后微服务时代")])]),t._v("：从软件层面独力应对微服务架构问题，发展到软硬一体，合力应对架构问题的时代，此即为“后微服务时代”。")]),t._v(" "),s("li",[s("a",{attrs:{href:"serverless"}},[s("strong",[t._v("无服务时代")])]),t._v("：如果说微服务架构是分布式系统这条路的极致，那无服务架构，也许就是“不分布式”的云端系统这条路的起点。")])])])}),[],!1,null,null,null);r.default=i.exports}}]);