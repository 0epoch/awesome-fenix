(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{465:function(t,a,e){"use strict";e.r(a);var r=e(11),n=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"透明多级分流系统"}},[t._v("透明多级分流系统")]),t._v(" "),e("p",[t._v("用户使用信息系统的过程中，请求从浏览器出发，通过网络，触及存储到最后端的数据库服务器中的信息，然后再返回到用户的浏览器，这其中要经过许许多多的技术基础设施。作为系统的设计者，我们应该意识到：不同的设施、部件在系统中有各自不同的价值。它们有一些位于网络的边缘，能够迅速响应用户的请求，避免给后端网络带来压力；有一些易于伸缩拓展，可以使用较小的代价，譬如堆叠机器来获得与用户数量相匹配的处理能力；有一些时刻保持着主从热备，为系统容灾容错，维护着高可用性；但也有一些设施是难以扩展的单点部件，只能依靠堆砌机器本身的性能来提升处理能力，典型的单点部件是传统RDBMS，在事务处理的"),e("RouterLink",{attrs:{to:"/architect-perspective/general-architecture/transaction/distributed.html#cap与acid"}},[t._v("CAP部分")]),t._v("中，我们曾讨论过传统数据库为了同时具备可用性和一致性，放弃了分区容错性。")],1),t._v(" "),e("p",[t._v("在进行系统设计时，我们应该充分理解这些部件的价值差异，一个普适的原则是尽可能减少单点部件，有一些单点是无可避免的，则应尽最大限度减少到达单点部件的流量。举个例子，许多的用户请求（如获取一张图片）在系统中往往会有多个部件能够处理（如浏览器缓存、CDN、反向代理、Web服务器、文件服务器、数据库都有可能提供这张图片），而恰如其分地将请求分流至最合适的组件中，避免所有流量都汇集到单点（如数据库），同时仍能够（在绝大多数时候）保证处理结果的准确性，仍能在单点系统出现故障时自动而迅速地实施补救措施，这便架构设计中多级分流的原则。缓存、节流、主备、负载均衡等这类措施，都是为了达成该原则所采用的工具与手段，而高可用架构、高并发架构则是通过该原则达成的目标。")]),t._v(" "),e("p",[t._v("一个现代的企业或互联网系统，其中所涉及到的分流手段数量之多、场景之广，可能连它的开发者本身都未必能全部意识到程度。这听起来似乎并不合理，但笔者认为这恰好是优秀架构设计的一种体现，分布广阔谓之“多级”，意识不到谓之“透明”，也就是本章我们要讨论的话题“"),e("strong",[t._v("透明多级分流系统")]),t._v("”（Transparent Multi-Level Diversion System）的来由。笔者将信息系统中我们可能使用到的分流手段，按从前（用户端）到后（服务端）的顺序列举如下，稍后将逐一讨论：")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"./client-cache"}},[e("strong",[t._v("客户端缓存")])]),t._v("（Client Cache）：HTTP协议的无状态性决定了它必须依靠客户端缓存来解决网络传输效率上的缺陷。")]),t._v(" "),e("li",[e("a",{attrs:{href:"./dns-lookup"}},[e("strong",[t._v("域名解析")])]),t._v("（DNS Lookup）：DNS也许是全世界最大、使用最频繁的信息查询系统，如果没有适当的分流机制，DNS将会成为整个网络的瓶颈。")]),t._v(" "),e("li",[e("a",{attrs:{href:"./transmission-optimization"}},[e("strong",[t._v("链路优化")])]),t._v("（Transmission Optimization）：今天的链路优化原则，在若干年后的未来再回头看它们时，其中多数已经成了奇技淫巧，有些甚至成了反模式。")]),t._v(" "),e("li",[e("a",{attrs:{href:"./cdn"}},[e("strong",[t._v("内容分发网络")])]),t._v("（Content Distribution Network）：CDN是一种十分古老而又十分透明，没什么存在感的分流系统，多出人都说听过它，但真正了解过它的人却很少。")]),t._v(" "),e("li",[e("a",{attrs:{href:"./load-balancing"}},[e("strong",[t._v("负载均衡")])]),t._v("（Load Balancing）：调度后方的多台机器，以统一的接口对外提供服务，承担此职责的技术组件被称为“负载均衡”。")]),t._v(" "),e("li",[e("a",{attrs:{href:"./cache-middleware"}},[e("strong",[t._v("缓存中间件")])]),t._v("（Cache Middleware） "),e("Badge",{attrs:{text:"编写中",type:"warning"}}),t._v("：讨论数据缓存、方法缓存、进程内/外、集中式/分布式缓存等等。")],1),t._v(" "),e("li",[e("a",{attrs:{href:"./database-expansion"}},[e("strong",[t._v("数据库扩展")])]),t._v("（Database Expansion） "),e("Badge",{attrs:{text:"编写中",type:"warning"}}),t._v("：（传统）数据库必须保证一致性与高可用，它与分布式天生就存在矛盾，我们要想一些别的办法来提升它的可扩展性。")],1)])])}),[],!1,null,null,null);a.default=n.exports}}]);