(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{516:function(e,t,n){"use strict";n.r(t);var r=n(11),a=Object(r.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"无服务时代"}},[e._v("无服务时代")]),e._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[e._v("无服务架构（Serverless）")]),e._v(" "),n("p",[e._v("如果说微服务架构是分布式系统这条路的极致，那无服务架构，也许就是“不分布式”的云端系统这条路的起点。")])]),e._v(" "),n("p",[e._v("进行分布式的目的，最初是由于单台机器的性能无法满足系统的运行需要，尽管后来架构演进过程中，容错能力、技术异构、职责划分等各方面因素都成为架构需要考虑的问题，但其中获得性能的需求在架构中比重依然很大。对软件研发而言，不做去分布式无疑是最简单的，如果单台服务器的性能可以是无限的，那架构演进的结果肯定会与今天有很大的差别，分布式也好，容器化也好，微服务也好，恐怕都未必会出现。")]),e._v(" "),n("p",[e._v("绝对意义上的无限性能必然是不存在的，但在云服务已经落地十年的今天，相对意义的无限性能已经成为了现实。2012年，"),n("a",{attrs:{href:"https://www.iron.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("iron.io公司"),n("OutboundLink")],1),e._v("率先提出了“无服务”（Serverless，应该翻译为“无服务器”更合适）的概念，2014年开始，AWS发布Lambda的商业化无服务应用，到了2019年，不仅中国的阿里云、腾讯云等厂商也开始相应跟进了无服务的产品，连大学、研究机构等都纷纷发表论文，将无服务称为“云计算时代的未来”，一时间“无服务”又成为了技术届的“新网红”，。")]),e._v(" "),n("blockquote",[n("p",[e._v("We predict that serverless computing will grow to dominate the future of cloud computing")]),e._v(" "),n("p",[e._v("我们预测无服务将会发展成为未来云计算的主流方式")]),e._v(" "),n("div",{staticClass:"custom-block right"},[n("p",[e._v("——  "),n("a",{attrs:{href:"https://arxiv.org/abs/1902.03383",target:"_blank",rel:"noopener noreferrer"}},[e._v("A Berkeley View on Serverless Computing"),n("OutboundLink")],1),e._v(", 2019")])])]),e._v(" "),n("p",[e._v("无服务今天还没有一个权威的官方定义，但无服务的概念并没有前面各种架构那么复杂，本来无服务也是以“简单”为主要卖点的，它只涉及两块内容：后端设施（Backend）和函数（Function）。")]),e._v(" "),n("ul",[n("li",[n("strong",[e._v("后端设施")]),e._v("是指数据库、消息队列、日志、存储，等等这一类用于支撑业务逻辑运行，但本身无业务含义的技术组件，这些后端设施都运行在云中，无服务中称其为“后端即服务”（Backend as a Service，BaaS）。")]),e._v(" "),n("li",[n("strong",[e._v("函数")]),e._v("就是指的业务逻辑代码，这里函数的概念与粒度，都已经很接近于程序编码角度的函数了，其区别是无服务中的函数运行在云端，不必考虑算力问题，不必考虑容量规划（从技术角度可以不考虑，从计费的角度你还是要掂量的），无服务中称其为“函数即服务”（Function as a Service，FaaS）。")])]),e._v(" "),n("p",[e._v("无服务的愿景是让开发者只需要纯粹地考虑业务，不需要考虑技术组件，后端的技术组件是现成的，可以直接取用；不需要考虑如何部署，部署的工作由云端自动完成；不需要考虑算力，算力可以认为是无限的；也不需要操心运维。在伯克利的论文中，将无服务架构下开发者不再关心这些细节，类比成当年从汇编语言踏进高级语言，开发者可以不去关注寄存器、信号、中断等技术细节而得到的生产力极大解放。")]),e._v(" "),n("p",[e._v("无服务架构的远期前景也许是很美好的，但笔者自己对无服务中短期内的发展并没有那么乐观，与单体架构、微服务架构不同，无服务架构一些天生的特点决定了它现在不是，以后如果没有重大变革的话，估计也很难成为一种普适性的架构模式，它对一些适合的应用确实能够大幅降低开发和运维环节的成本，譬如多数资讯类网站都适合于短链接、无状态的服务，或者一些短周期的“月抛型项目”，但对于许多信息管理系统，或者说所有具有业务逻辑复杂，依赖服务端状态，响应速度要求较高，需要长链接，等等这些特征的应用，无服务架构至少目前是相对并不合适的。这是因为无服务天生“无限算力”的假设就决定了它必须要按使用量（函数运算的时间和内存）计费以控制消耗算力的规模，因而函数不会一直以活动状态常驻服务器，请求到了才会开始运行，这导致了函数不能依赖服务端状态，也导致能函数会有冷启动时间，响应的性能不可能太好（百毫秒甚至到接近秒的级别）。")]),e._v(" "),n("p",[e._v("无论如何，云计算毕竟是大势所趋，今天信息系统建设的概念和观念，在（较长尺度的）明天都是会转变适应云端的，笔者并不怀疑届时无服务会有更广阔的应用空间。如果说微服务架构是分布式系统这条路的极致，那无服务架构，也许就是“不分布式”的云端系统这条路的起点。笔者很难预想在架构演进之路上，微服务和无服务之后还会有什么，尽管目光所及之处，只是不远的前方，即使如此，依然可以看到那里有许多值得去完成的工作在等待我们。")]),e._v(" "),n("div",{staticClass:"quote"},[n("p",{staticClass:"title"},[e._v("架构演进之路")]),n("p",[e._v("We can only see a short distance ahead, but we can see plenty there that needs to be done.")]),e._v(" "),n("p",[e._v("尽管目光所及之处，只是不远的前方，即使如此，依然可以看到那里有许多值得去完成的工作在等待我们。")]),e._v(" "),n("div",{staticClass:"custom-block right"},[n("p",[e._v("—— Alan Turing，"),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Computing_Machinery_and_Intelligence",target:"_blank",rel:"noopener noreferrer"}},[e._v("Computing Machinery and Intelligence"),n("OutboundLink")],1),e._v("，1950")])])])])}),[],!1,null,null,null);t.default=a.exports}}]);